#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Initialization and Installation
** Garbage Collection
#+BEGIN_SRC emacs-lisp
;; Allocate more memory to the garbage collector during initialization.
(setq gc-cons-threshold (* 500 1024 1024))
;; Reset it to the default after initialization
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 5 1024 1024))))
#+END_SRC
** Automatic tangling
Taken from [[https://github.com/larstvei/dot-emacs/][larstvei]]
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  (interactive)
  ;; Continue only if init.org is the current file
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (load-file (expand-file-name (concat user-emacs-directory "init.el"))))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** MELPA
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
    'package-archives
    '("melpa" . "http://melpa.org/packages/")
    t)
  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))

#+END_SRC
** Install use-package
Make sure that use-package is installed and that ensure is always on so that use-package downloads every package that is not installed.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
* Misc options
** Startup with tramp
#+BEGIN_SRC emacs-lisp
;;(require 'tramp)
(setq tramp-default-method "ssh"
      tramp-backup-directory-alist backup-directory-alist
      tramp-ssh-controlmaster-options "ssh")
#+END_SRC
** Custom Keybinds
#+BEGIN_SRC emacs-lisp
;;Replace the default switch buffer key with the smarter ibuffer window
(global-set-key (kbd "C-x C-b") 'ibuffer)

(global-set-key (kbd "C-c w") 'whitespace-mode)

(global-set-key (kbd "C-c c") 'quick-calc)

(global-set-key (kbd "C-c a") 'org-agenda-list)
(global-set-key (kbd "C-c o") 'org-capture)

(global-set-key (kbd "C-c g") 'gnus)

(global-set-key (kbd "<f8>") 'compile)
#+END_SRC
** Random Quality of Life Things
#+BEGIN_SRC emacs-lisp
;; Variable that keeps track of whether the current system is a windows system
(setq is-windows (eq system-type 'windows-nt))

;; Delete all the trailing whitespaces every time the file is saved
(push 'delete-trailing-whitespace before-save-hook)
;;Show current buffer name
(setq frame-title-format "emacs - %b")
;;Hide the toolbar
(tool-bar-mode -1)

;; Always treat tabs as spaces
(setq-default indent-tabs-mode nil)

;;Truncate lines instead of word wrapping them
(setq-default truncate-lines t)
;; Use y or n instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable the visual bell and the audio bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; 99% opacity when the window is active, 90% when it is in the background.
(set-frame-parameter (selected-frame) 'alpha '(99 . 90))
(add-to-list 'default-frame-alist '(alpha . (99 . 90)))
#+END_SRC
*** Easily search for non ASCII Characters
#+BEGIN_SRC emacs-lisp
(setq search-default-mode #'char-fold-to-regexp)
(setq replace-char-fold t)
#+END_SRC
*** Prettify symbols mode
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode)
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+END_SRC
** Open eshell in current window
Credit goes to [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfugwkt][/u/howardabrams]] and [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfuuo5y][/u/AndersBakken]]
#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the current buffer's file."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (name (car (last (split-string parent "/" t)))))
    (split-window-vertically)
    (other-window 1)
    (eshell)
    (rename-buffer (concat "Eshell: " name))
    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-c s") 'eshell-here)
#+END_SRC
** UTF-8 and Fonts
#+BEGIN_SRC emacs-lisp
(if is-windows
    (set-face-attribute 'default nil :family "Consolas" :height 100)
  (set-face-attribute 'default nil :family "DejaVu Sans Mono"))

;;The following lines force UTF-8 whenever possible
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
#+END_SRC
*** Dos2Unix
#+BEGIN_SRC emacs-lisp
(defun dos2unix ()
  "Not exactly but it's easier to remember"
  (interactive)
  (set-buffer-file-coding-system 'unix 't) )

(defun unix2dos ()
  "Not exactly but it's easier to remember"
  (interactive)
  (set-buffer-file-coding-system 'dos 't))
#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
;;Enables copy/paste from the system clipboard.
(setq select-enable-primary t)
(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
#+END_SRC
** Auto saves
Move the auto-save and backup files into the temp file directory so that emacs doesn't flood the working folders with junk.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

(setq auto-save-file-name-transforms
      `((".*" , temporary-file-directory t)))
#+END_SRC
** Startup Message and Screen
#+BEGIN_SRC emacs-lisp
;;Disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

(defun display-startup-echo-area-message()
  (message (emacs-init-time)))
#+END_SRC
** Dired quick copy/paste
When dired-dwim-target is enabled, dired tries to guess a default target directory. So if there are multiple dired panes open it will use that as the default.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
* Major Custom Packages
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :ensure counsel
  :ensure swiper
  :bind (
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("\C-s" . swiper)
         )
  :config
  (progn
    (ivy-mode 1)))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :diminish undo-tree-mode
  :diminish evil-goggles-mode
  :ensure evil-matchit
  :ensure evil-surround
  :ensure evil-easymotion

  :init
  (progn
    (setq evil-mode-line-format '(before . mode-line-front-space)))
  :config
  (progn
    (evil-mode 1)
    ;;Disable evil in these modes
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'erc-mode 'emacs)
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'eshell-mode 'emacs)
    (evil-set-initial-state 'message-mode 'emacs)
    (evil-set-initial-state 'compilation-mode 'emacs)
    (global-evil-surround-mode 1)
    (global-evil-matchit-mode 1)
    (evilem-default-keybindings "SPC")
    ))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  ;;Complete on tab
  :bind (("TAB" . company-indent-or-complete-common))
  :init
  ;; Launch auto-complete with default settings
  (progn
    (add-hook 'after-init-hook 'global-company-mode)))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :commands global-flycheck-mode
  :init
  (progn
    (add-hook 'after-init-hook 'global-flycheck-mode)))
#+END_SRC
** Pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf$" . pdf-view-mode)
  :init
  (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
  :config
  (unless is-windows
    ;; Only install pdf tools on unix
    (pdf-tools-install)
    (define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
    (define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)))
#+END_SRC
** mtg-deck-mode
#+BEGIN_SRC emacs-lisp
(use-package mtg-deck-mode)
#+END_SRC
** E-reader
#+BEGIN_SRC emacs-lisp
(use-package ereader
  :mode (("\\.epub" . ereader-mode))
  :init
  (progn
    (add-to-list 'evil-emacs-state-modes 'ereader-mode))
  :config
  (progn
    (visual-line-mode 1)))
#+END_SRC
** Mingus
#+BEGIN_SRC emacs-lisp
(use-package mingus
  :commands mingus-browse
  :commands mingus-add-podcast-and-play
  :init
  (progn
    (global-set-key (kbd "C-c m") 'mingus-browse)
    ;;Disable evil in mingus
    ;; evil-set-initial-state doesn't work for some reason.
    ;; (evil-set-initial-state 'mingus-help-mode 'emacs)
    ;; (evil-set-initial-state 'mingus-browse-mode 'emacs)
    ;; (evil-set-initial-state 'mingus-playlist-mode 'emacs)

    (add-hook 'mingus-browse-hook 'evil-emacs-state)
    (add-hook 'mingus-playlist-hooks 'evil-emacs-state)
    ))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t)
#+END_SRC
** Elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands elfeed
  :bind (
         ("C-c e" . elfeed)
         )
  :init
  (progn
    ;; Disable evil in all the elfeed panes
    (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
    (setq elfeed-feeds
     '(
       ("https://www.xkcd.com/rss.xml" webcomic)
       ("http://www.smbc-comics.com/rss.php" webcomic)
       ("http://nedroid.com/feed/" webcomic)
       ("http://www.awkwardzombie.com/awkward.php" webcomic)
       ("http://existentialcomics.com/rss.xml" webcomic)
       ("http://mega64.com/category/podcast/feed/" podcast)
       ("http://colorcommontary.com/feed/podcast" podcast)
       ("http://www.giantbomb.com/podcast-xml/beastcast" podcast)
       ("http://billburr.libsyn.com/rss" podcast)
       ("http://planet.emacsen.org/atom.xml" blog emacs)
       )
     )))
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure company-auctex
  :mode (("\\.tex$" . latex-mode)
         ("\\.latex$" . latex-mode))
  :init
  (progn
    (add-hook 'latex-mode-hook 'turn-on-auto-fill)
    (add-hook 'latex-mode-hook 'visual-line-mode))
  :config
  (progn
    (company-auctex-init)))
#+END_SRC
** Pass
#+BEGIN_SRC emacs-lisp
(use-package password-store
  :commands (password-store-copy))
#+END_SRC
** BBDB
#+BEGIN_SRC emacs-lisp
(use-package bbdb
  :ensure counsel-bbdb
  :commands (bbdb)
  :init
  (progn
    (setq bbdb-check-postcode nil)

    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
    (setq bbdb/mail-auto-create-p t
          bbdb/news-auto-create-p t)
    (setq bbdb-file "~/Sync/Notes/bbdb"))
  :config
  (progn
    (bbdb-initialize 'message 'gnus)))
#+END_SRC
** Currently disabled
*** Relative Line Numbers
Relative line numbers. Currently disabled, because having them seems a bit redundant with vim easymotions.
#+BEGIN_SRC emacs-lisp
;; Relative line package
(use-package nlinum-relative
  :commands nlinum-relative-mode
  :disabled t
  :init
  (progn
    (setq nlinum-relative-redisplay-delay 0)
    (setq nlinum-relative-current-symbol "")
    (setq nlinum-relative-offset 0)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    )
  :config
  (progn
    (nlinum-relative-setup-evil)
    ))
#+END_SRC
*** Projectile
Not using projectile right now.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands projectile-mode
  :disabled t
  :ensure nil
  :init
  (progn
    (add-hook 'prog-mode-hook 'projectile-mode)
    )
  )

(use-package counsel-projectile
  :commands counsel-projectile-on
  :disabled t
  :ensure nil
  :init
  (progn
    (add-hook 'projectile-mode-hook 'counsel-projectile-on)))
#+END_SRC
*** notmuch
Currently using gnus for my email.
#+BEGIN_SRC emacs-lisp
(unless t
  (autoload 'notmuch "notmuch" "notmuch mail" t)
  (add-hook 'notmuch-hello-mode 'evil-emacs-state)
  (add-hook 'notmuch-message-mode 'evil-emacs-state)
  (add-hook 'notmuch-search-mode 'evil-emacs-state)
  )
#+END_SRC
* Programming Modes
** Language Independent Settings
*** Indentation
**** Whitespace mode
Always enable whitespace mode
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :commands whitespace-mode
  :diminish whitespace-mode
  :init
  (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC

**** Aggressive indent
Automatic indentation.
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :diminish aggressive-indent-mode
  :init
  (progn
    (global-aggressive-indent-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'python-mode)
    )
  )
#+END_SRC
**** Disabled
***** Indent Guides
Better indent guides. Currently disabled because they cause insane hangs in python mode.
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :disabled t
  :commands highlight-indent-guides-mode
  :diminish highlight-indent-guides-mode
  :init
  (progn
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
  :config
  (progn
    (setq highlight-indent-guides-method 'character)))
#+END_SRC
*** Misc
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)

(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
 :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

#+END_SRC
**** Disabled
***** yasnippet
Not using yasnippet right now but it could become useful in the future.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :disabled t
  :ensure nil
  :commands yas-minor-mode
  :diminish yas-minor-mode
  :init
  (progn
    (add-hook 'prog-mode-hook 'yas-minor-mode)))
#+END_SRC
** C-Mode
#+BEGIN_SRC emacs-lisp
;;Indent c++ code with 4 spaces
(defun indent-c-mode-hook ()
  (setq c-basic-offset 4
        c-indent-level 4
        c-default-style "linux"))
(add-hook 'c-mode-common-hook 'indent-c-mode-hook)
#+END_SRC
** Python
*** Company-Jedi
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :mode (("\\.py$" . python-mode))
  :init
  (progn
    (add-hook 'python-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends) '(company-jedi))))
    )
  )
#+END_SRC
*** Disabled
**** Autopep8
Using flycheck instead
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :disabled t
  :commands py-autopep8-enable-on-save
  :mode (("\\.py$" . python-mode))
  :init
  (progn
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
  )
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :commands (cider-jack-in)
  :init
  (progn
    (add-to-list 'evil-emacs-state-modes 'cider-repl-mode)
    ))
#+END_SRC
** Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode (("\\.js$'" . js2-mode)))
#+END_SRC
** Web/HTML
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.html$" . web-mode)
         )
  :ensure company-web
  :init
  (progn
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent-offset 2)

      (set (make-local-variable 'company-backends)
           '(company-web-html company-files))

      (whitespace-turn-off)
      )
    (add-hook 'web-mode-hook  'my-web-mode-hook)
    )
  )

(use-package skewer-mode
  :defer t
  :init
  (progn
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode)
    (add-to-list 'evil-emacs-state-modes 'skewer-repl-mode)
    )
  )

(use-package emmet-mode
  :commands emmet-mode
  :init
  (progn
    (setq emmet-move-cursor-between-quotes t)
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'html-mode-hook 'emmet-mode)
    ))

(use-package impatient-mode
  :disabled t
  :ensure nil
  :commands httpd-start)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (progn
    (setq markdown-command "multimarkdown")
    (add-hook 'markdown-mode-hook 'visual-line-mode)))
#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :mode (("\\.sh$" . shell-script-mode))
  :init
  (progn
    (add-hook 'shell-script-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends) '(company-shell))))
    )
  )
#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode (("\\.lua" . lua-mode)))
#+END_SRC
*** Company-lua
#+BEGIN_SRC emacs-lisp
(use-package company-lua
  :mode (("\\.lua" . lua-mode))
  :init
  (progn
    (add-hook 'lua-mode-hook (lambda()
                               (setq-local company-backends '(company-lua))))))
#+END_SRC
*** Flycheck-lua
#+BEGIN_SRC emacs-lisp
(use-package flymake-lua
  :mode (("\\.lua" . lua-mode)))
#+END_SRC
*** Love
#+BEGIN_SRC emacs-lisp
(use-package love-minor-mode
  :commands (love-minor-mode)
  :init
  (progn
    (add-hook 'love-minor-mode-hook
              (lambda()
                (set (make-local-variable 'compile-command)
                     (concat "love " default-directory))))))
#+END_SRC
** Currently not used
*** Slime
Not using slime right now
#+BEGIN_SRC emacs-lisp
(use-package slime
  :disabled t
  :ensure nil
  :commands slime)
#+END_SRC
*** Rust

#+BEGIN_SRC emacs-lisp
(use-package cargo
  :commands cargo-minor-mode
  :disabled t
  :ensure nil
  :init
  (progn
    (add-hook 'rust-mode-hook 'cargo-minor-mode))
  )
(use-package rust-mode
  :mode (("\\.rs$" . rust-mode))
  :disabled t
  :ensure nil
  )

(use-package racer
  :commands racer-mode
  :disabled t
  :ensure nil
  :init
  (progn
    (setq racer-rust-src-path (file-truename "/usr/src/rust/src"))
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    ))


(use-package flycheck-rust
  :commands flycheck-rust-setup
  :disabled t
  :ensure nil
  :init
  (progn
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :diminish (org-indent-mode visual-line-mode flyspell-mode)
  :ensure org-bullets
  :ensure htmlize
  :init
  (progn
    (setq org-src-preserve-indentation nil
          org-edit-src-content-indentation 0
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-startup-with-inline-images t
          ;;org-startup-with-latex-preview t
          org-latex-create-formula-image-program 'imagemagick
          org-list-allow-alphabetical t

          org-notes-location "~/Sync/Notes/"
          org-todo-location (expand-file-name
                             (concat org-notes-location "agenda.org"))
          org-default-notes-file org-todo-location

          org-agenda-files (list org-todo-location)
          )


    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline org-todo-location "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("c" "Clipboard" entry (file+headline org-todo-location "Links")
             "* %?\n %x")))

    ;; Org-publish config
    (setq org-html-validation-link nil)
    (setq org-publish-project-alist
          '(("org-blog"
             :base-directory "~/Sync/Notes/blog"
             :publishing-directory "~/Sync/Notes/publish"
             :publishing-function org-html-publish-to-html
             :auto-sitemap t
             :sitemap-filename "index.org"
             :sitemap-title "Neosloth's Blog"
             :sitemap-file-entry-format "\"%t\" by %a on %d."
             :sitemap-date-format "%B %dth, %Y"
             :sitemap-sort-files t
             :auto-preamble t
             :html-head "<link rel=\"stylesheet\"
                       href=\"./css/style.css\" type=\"text/css\"/>"
             )
            ("org-static"
             :base-directory "~/Sync/Notes/blog"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|ico"
             :publishing-directory "~/Sync/Notes/publish"
             :recursive t
             :publishing-function org-publish-attachment)
            ("org" :components ("org-blog" "org-static"))))


    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
    (add-hook 'org-mode-hook 'org-bullets-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'visual-line-mode)
    )
  :config
  (progn
    (require 'org-bullets)
    (require 'htmlize)
    (require 'ox-md)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (java . t)
       (C . t)
       (gnuplot . t)
       (sh . t)
       (calc . t)
       ))

    (defun git-push-all (commit-message)
      (shell-command "git add -A")
      (shell-command (concatenate
                      'string "git commit -m \"" commit-message "\""))
      (shell-command "git push origin master"))

    (defun publish-and-push (&optional blog)
      (interactive)
      (or blog (setq blog "blog"))
      (org-publish blog)
      (let ((default-directory (plist-get
                                (cdr (car org-publish-project-alist))
                                :publishing-directory)))
        (git-push-all (format-time-string "%FT%T%z")))
      )))
#+END_SRC
* Gnus
#+BEGIN_SRC emacs-lisp
(use-package gnus
  :commands gnus
  :ensure org-mime
  :init

  ;; @see http://www.emacswiki.org/emacs/GnusGmail#toc1
  (setq gnus-select-method '(nntp "news.gmane.org")) ;; if you read news groups

  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5))

  (add-hook 'gnus-group-mode-hook
            ;; list all the subscribed groups even they contain zero un-read messages
            (lambda () (local-set-key "o" 'my-gnus-group-list-subscribed-groups )))

  ;; ask encryption password once
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  (setq gnus-thread-sort-functions
        '(gnus-thread-sort-by-most-recent-date
          (not gnus-thread-sort-by-number)))
  ;;(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (setq gnus-thread-hide-subtree t)
  (setq user-mail-address "superstepag@gmail.com"
        user-full-name "Stefan Kuznetsov")

  (setq gnus-select-method
        '(nnimap "main"
                 (nnimap-address "imap.gmail.com")
                 (nnimap-server-port "imaps")
                 (nnimap-stream ssl)))

  (setq gnus-secondary-select-methods
        '((nnimap "official"
                  (nnimap-address "imap.gmail.com")
                  (nnimap-server-port "imaps")
                  (nnimap-stream ssl)
                  )
          (nnimap "hotmail"
                  (nnimap-address "outlook.office365.com")
                  (nnimap-server-port 993)
                  )
          ))

  ;;send mail config
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

  (defun my-message-mode-setup ()
    "Turn on auto fill when composing emails."
    (flyspell-mode t)
    (setq fill-column 72)
    (turn-on-auto-fill))

  (add-hook 'message-mode-hook 'my-message-mode-setup)

  :config
  (require 'org-mime)
  (setq org-mime-library 'mml)

  (defun exit-gnus-on-exit ()
    (if (and (fboundp 'gnus-group-exit)
             (gnus-alive-p))
        (with-current-buffer (get-buffer "*Group*")
          (let (gnus-interactive-exit)
            (gnus-group-exit)))))

  (add-hook 'kill-emacs-hook 'exit-gnus-on-exit))
#+END_SRC
* ERC
#+BEGIN_SRC emacs-lisp
(use-package erc
  :commands irc-connect
  :ensure erc-hl-nicks
  :init
  (progn
    (setq erc-prompt-for-password nil)
    ;; Switch current buffer whenever you are mentioned
    (setq erc-auto-query 'buffer)
    (setq erc-nick "neosloth")
    (setq erc-kill-buffer-on-part t)
    (setq erc-autojoin-channels-alist
          '((".*freenode.net" "#emacs" "#lainchan")
            ("portlane.se.quakenet.org" "#unrealvidya")
            (".*undernet.org" "#bookz")
            (".*abjects.net" "#mg-chat" "#moviegods")
            ))
    (defun irc-connect ()
      "Connect to IRC interactively."
      (interactive)
      (setq servers '(
                      ("Freenode" . "irc.freenode.net")
                      ("Undernet" . "ix1.undernet.org")
                      ("Abjects" . "irc.abjects.net")
                      ))
      (dolist (server servers)
        (when (y-or-n-p (car server))
          (erc :server (cdr server) :port 6667)))
      ))

  :config
  (progn
    (add-hook 'window-configuration-change-hook
              '(lambda()
                 (setq erc-fill-column (- (window-width) 2))))
    (erc-hl-nicks-mode 1)
    (toggle-truncate-lines)
    (erc-spelling-mode 1)
    (erc-notifications-mode 1)
    (erc-scrolltobottom-enable)
    ))

#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package material-theme
  :ensure t
  :config
  (load-theme 'material t))
#+END_SRC
