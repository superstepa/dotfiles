#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Initialization and Installation
** Garbage Collection
#+BEGIN_SRC emacs-lisp
;; Allocate more memory to the garbage collector during initialization.
(setq gc-cons-threshold (* 500 1024 1024))
;; Reset it to the default after initialization
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 5 1024 1024))))
#+END_SRC
** Automatic tangling
Taken from [[https://github.com/larstvei/dot-emacs/][larstvei]]
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  (interactive)
  ;; Continue only if init.org is the current file
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (load-file (expand-file-name (concat user-emacs-directory "init.el"))))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** MELPA
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
    'package-archives
    '("melpa" . "http://melpa.org/packages/")
    t)
  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))

#+END_SRC
** Install use-package
Make sure that use-package is installed and that ensure is always on so that use-package downloads every package that is not installed.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
* Misc options
** Custom Keybinds
#+BEGIN_SRC emacs-lisp
;;Replace the default switch buffer key with the smarter ibuffer window
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; Toggle whitespace mode
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; Quick calc
(global-set-key (kbd "C-c c") 'quick-calc)

;;Show what's coming up
(global-set-key (kbd "C-c a") 'org-agenda-list)
#+END_SRC
** Random Quality of Life Things
#+BEGIN_SRC emacs-lisp
;; Switch between buffers with S-arrow
(windmove-default-keybindings)
;; Delete all the trailing whitespaces every time the file is saved
(push 'delete-trailing-whitespace before-save-hook)
;;Show current buffer name
(setq frame-title-format "emacs - %b")
;;Hide the toolbar
(tool-bar-mode -1)

;; Always treat tabs as spaces
(setq-default indent-tabs-mode nil)

;;Truncate lines instead of word wrapping them
(setq-default truncate-lines t)
;; Use y or n instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable the visual bell and the audio bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; 99% opacity when the window is active, 90% when it is in the background.
(set-frame-parameter (selected-frame) 'alpha '(99 . 90))
(add-to-list 'default-frame-alist '(alpha . (99 . 90)))
#+END_SRC
*** Easily search for non ASCII Characters
#+BEGIN_SRC emacs-lisp
(setq search-default-mode #'char-fold-to-regexp)
(setq replace-char-fold t)
#+END_SRC
*** Prettify symbols mode
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode)
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+END_SRC
** Open eshell in current window
Credit goes to [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfugwkt][/u/howardabrams]] and [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfuuo5y][/u/AndersBakken]]
#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the current buffer's file."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (name (car (last (split-string parent "/" t)))))
    (split-window-vertically)
    (other-window 1)
    (eshell)
    (insert (concat "cd " parent))
    (eshell-send-input)
    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-c s") 'eshell-here)
#+END_SRC
** UTF-8 and Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "DejaVu Sans Mono")

;;The following lines force UTF-8 whenever possible
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
#+END_SRC
*** Dos2Unix
#+BEGIN_SRC emacs-lisp
(defun dos2unix ()
  "Not exactly but it's easier to remember"
  (interactive)
  (set-buffer-file-coding-system 'unix 't) )
#+END_SRC
** Auto saves
Move the auto-save and backup files into the temp fire directory so that emacs doesn't flood the working folders with junk.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

(setq auto-save-file-name-transforms
      `((".*" , temporary-file-directory t)))
#+END_SRC
** Startup Message and Screen
#+BEGIN_SRC emacs-lisp
;;Disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

(defun display-startup-echo-area-message()
  (message (emacs-init-time)))
#+END_SRC
* Major Custom Packages
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :init
  (setq projectile-completion-system 'ivy)
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)))
  (use-package swiper
    :bind (("\C-s" . swiper)))

  :config
  (progn
    (ivy-mode 1)
    )
  )
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :diminish undo-tree-mode
  :init
  (progn
    (setq evil-mode-line-format '(before . mode-line-front-space)))
  :config
  (progn
    (evil-mode 1)
    ;;Disable evil in these modes
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'erc-mode 'emacs)
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'eshell-mode 'emacs)
    (use-package evil-surround
      :config
      (global-evil-surround-mode 1))
    (use-package evil-matchit
      :config
      (global-evil-matchit-mode 1))))
#+END_SRC

** Relative Line Number
#+BEGIN_SRC emacs-lisp
;; Relative line package
(use-package nlinum-relative
  :commands nlinum-relative-mode
  :init
  (progn
    (setq nlinum-relative-redisplay-delay 0)
    (setq nlinum-relative-current-symbol "")
    (setq nlinum-relative-offset 0)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    )
  :config
  (progn
    (nlinum-relative-setup-evil)
    ))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands projectile-mode
  :init
  (progn
    (add-hook 'prog-mode-hook 'projectile-mode)
    )
  )

(use-package counsel-projectile
  :commands counsel-projectile-on
  :init
  (progn
    (add-hook 'projectile-mode-hook 'counsel-projectile-on)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t)
#+END_SRC
** Elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands elfeed
  :init
  (progn
    ;; Disable evil in all the elfeed panes
    (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
    (setq
     elfeed-feeds
     '(
       ("https://www.xkcd.com/rss.xml" webcomic)
       ("http://www.smbc-comics.com/rss.php" webcomic)
       ("http://nedroid.com/feed/" webcomic)
       ("http://www.awkwardzombie.com/awkward.php" webcomic)
       ("http://mega64.com/category/podcast/feed/" podcast)
       ("http://colorcommontary.com/feed/podcast" podcast)
       ("http://billburr.libsyn.com/rss" podcast)
       ("http://planet.emacsen.org/atom.xml" blog emacs)
       )
     ))
  :config
  (progn))
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :mode (("\\.tex$" . latex-mode)
         ("\\.latex$" . latex-mode))
  :config
  (progn
    (add-hook 'latex-mode-hook 'turn-on-auto-fill)
    (add-hook 'latex-mode-hook 'visual-line-mode)
    (use-package company-auctex
      :config
      (company-auctex-init))))
#+END_SRC
** Slime
#+BEGIN_SRC emacs-lisp
(use-package slime
  :disabled t
  :commands slime)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init
  ;; Launch auto-complete with default settings
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-idle-delay 0))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :init
  (add-hook 'after-init-hook 'global-flycheck-mode))

#+END_SRC
** Pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf$" . pdf-view-mode)
  :config
  (unless (eq system-type 'windows-nt)
    ;; Only install pdf tools on unix
    (pdf-tools-install))
  )
#+END_SRC
** mtg-deck-mode
#+BEGIN_SRC emacs-lisp
(use-package mtg-deck-mode
  :mode (("\\.dec" . mtg-deck-mode)))
#+END_SRC
* Programming Modes
** Language Independent Settings
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :ensure evil-smartparens
  :diminish evil-smartparens-mode
  :init
  (progn
    (add-hook 'smartparens-enabled-hook 'evil-smartparens-mode)
    (add-hook 'prog-mode-hook 'smartparens-mode))
  :config
  (progn
    (require 'smartparens-config)
    (show-smartparens-mode)
    (smartparens-strict-mode t)))

(use-package yasnippet
  :commands yas-minor-mode
  :diminish yas-minor-mode
  :ensure java-snippets
  :init
  (progn
    (add-hook 'prog-mode-hook 'yas-minor-mode)))

(use-package whitespace
  :commands whitespace-mode
  :diminish whitespace-mode
  :init

  (add-hook 'prog-mode-hook 'whitespace-mode))

(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

(use-package aggressive-indent
  :diminish aggressive-indent-mode
  :init
  (progn
    (global-aggressive-indent-mode)
    )
  )
#+END_SRC
** C-Mode
#+BEGIN_SRC emacs-lisp
;;Indent c++ code with 4 spaces
(defun indent-c-mode-hook ()
  (setq c-basic-offset 4
        c-indent-level 4
        c-default-style "linux"))
(add-hook 'c-mode-common-hook 'indent-c-mode-hook)
#+END_SRC
** Company-Jedi
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :defer t
  :init
  (progn
    (add-to-list 'company-backends 'company-jedi))
  )
#+END_SRC
*** Autopep8
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :mode (("\\.py$" . python-mode))
  :init
  (progn
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
  )
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :defer t
  :disabled t)
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package cargo
  :mode (("\\.rs$" . rust-mode))
  :init
  (progn
    (add-hook 'rust-mode-hook 'cargo-minor-mode))
  )
(use-package rust-mode
  :mode (("\\.rs$" . rust-mode))
  )

(use-package racer
  :mode (("\\.rs$" . rust-mode))
  :init
  (progn
    (setq racer-rust-src-path (file-truename "/usr/src/rust/src"))
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    ))


(use-package flycheck-rust
  :mode (("\\.rs$" . rust-mode))
  :init
  (progn
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.html$" . web-mode)
         ("\\.css$" . web-mode)
         ))

(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode)))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :diminish (org-indent-mode visual-line-mode flyspell-mode)
  :init
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-notes-location "~/Sync/Notes/"
        org-todo-location (expand-file-name
                           (concat org-notes-location "agenda.org"))
        org-agenda-files (list org-todo-location))
  :config
  (progn
    (use-package org-bullets)
    (use-package htmlize)
    (add-hook 'org-mode-hook (lambda()
                               (flyspell-mode 1)
                               (org-toggle-pretty-entities)
                               (org-bullets-mode 1)
                               (org-indent-mode 1)
                               (visual-line-mode 1)
                               ))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (java . t)
       (C . t)
       (gnuplot . t)
       ))))

#+END_SRC
* ERC
#+BEGIN_SRC emacs-lisp
(use-package erc
  :commands irc-connect
  :init
  (progn
    (use-package erc-hl-nicks
      :commands erc-hl-nicks-mode)
    (setq erc-prompt-for-password nil)
    ;; Switch current buffer whenever you are mentioned
    (setq erc-auto-query 'buffer)
    (setq erc-nick "neosloth")
    (setq erc-kill-buffer-on-part t)
    (setq erc-autojoin-channels-alist
          '((".*freenode.net" "#emacs")
            ("portlane.se.quakenet.org" "#unrealvidya")
            (".*undernet.org" "#bookz")
            ))
    (defun irc-connect ()
      "Connect to IRC interactively."
      (interactive)
      (setq servers '(
                      ("Freenode" . "irc.freenode.net")
                      ("Undernet" . "ix1.undernet.org")
                      ))
      (dolist (server servers)
        (when (y-or-n-p (car server))
          (erc :server (cdr server) :port 6667)))
      ))
  :config
  (progn
    (add-hook 'window-configuration-change-hook
              '(lambda()
                 (setq erc-fill-column (- (window-width) 2))))
    (add-hook 'erc-mode-hook (lambda()
                               (erc-hl-nicks-mode 1)
                               (toggle-truncate-lines)
                               ))
    (erc-spelling-mode 1)))

#+END_SRC
* EMMS
#+BEGIN_SRC emacs-lisp
(use-package emms
  :commands emms-add-directory-tree
  :commands emms-add-directory
  :commands emms-add-file

  :init
  (progn
    ;;Custom key bindings. My laptop has no media next/previous so home and end are used instead
    (global-set-key (kbd "<XF86AudioPlay>") 'emms-pause)
    (global-set-key (kbd "C-c m") 'emms-playlist-mode-go)
    (global-set-key (kbd "C-c <home>") 'emms-previous)
    (global-set-key (kbd "C-c <end>") 'emms-next)
    ;;Disable evil in emms
    (add-to-list 'evil-emacs-state-modes 'emms-browser-mode)
    (add-to-list 'evil-emacs-state-modes 'emms-playlist-mode)

    (setq emms-source-file-default-directory "~/Sync/Music/")
    (setq emms-playlist-buffer-name "*Music*")

    ;; Faster search function
    (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
    (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-internal)

    ;;Switch to the playlist whenever I add something to it
    ;;(add-hook 'emms-playlist-source-inserted-hook 'emms-playlist-mode-go)
    )

  :config
  (progn
    ;;Base emms configuration
    (emms-minimalistic)
    ;;Load all the extensions I want
    (eval-and-compile
      (require 'emms-playlist-mode)
      (require 'emms-mode-line)
      )
    (emms-mode-line 1)
    (add-to-list 'emms-player-list 'emms-player-mplayer)
    )
  )
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package material-theme
  :config
  (load-theme 'material t))
#+END_SRC
