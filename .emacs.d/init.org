#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Initialization and Installation
** Automatic tangling and Byte Compliation
Taken from [[https://github.com/larstvei/dot-emacs/][larstvei]]
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  (interactive)
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle))))
      ;;(byte-compile-file (concat user-emacs-directory "init.el")))))


(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** Garbage Collection and MELPA
#+BEGIN_SRC emacs-lisp
;; Allocate more memory to the garbage collector during initialization.
(setq gc-cons-threshold (* 500 1024 1024))
;; Reset it to the default after initialization
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
    'package-archives
    '("melpa" . "http://melpa.org/packages/")
    t)
  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))

(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 5 1024 1024))))
#+END_SRC
** OS Detection
#+BEGIN_SRC emacs-lisp
(setq is-windows (eq system-type 'windows-nt))
#+END_SRC
** Install use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
* Better Defaults
** Random Quality of Life Things
#+BEGIN_SRC emacs-lisp
;; Switch between buffers with S-arrow
(windmove-default-keybindings)
;; Delete all the trailing whitespaces every time I save
(push 'delete-trailing-whitespace before-save-hook)
;;Show current buffer name
(setq frame-title-format "emacs - %b")
;;Hide the toolbar
(tool-bar-mode -1)
;; Always treat tabs as spaces
(setq-default indent-tabs-mode nil)

;; Makes double pressing tab act as M-Tab (completions)
(setq tab-always-indent 'complete)

;;Truncate lines instead of word wrapping them
(setq-default truncate-lines t)
;; Use y or no instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable the visual bell and the audio bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+END_SRC
** Auto saves
#+BEGIN_SRC emacs-lisp
;; Move the auto saved and backed up files into the OS temp directory
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

(setq auto-save-file-name-transforms
      `((".*" , temporary-file-directory t)))
#+END_SRC
** Startup Message and Screen
#+BEGIN_SRC emacs-lisp
;;Disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

(defun display-startup-echo-area-message()
  (message "Welcome."))
#+END_SRC

* Custom Packages
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (ivy-mode 1))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (progn
    (evil-mode 1)
    ;;Disable evil in these modes
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'erc-mode 'emacs)
    (use-package powerline-evil
      :config
      (progn
        (powerline-default-theme)
        (powerline-evil-vim-color-theme)))
    (use-package evil-surround
      :config
      (evil-surround-mode 1))
    (use-package evil-nerd-commenter
      :config
      (evilnc-default-hotkeys))))
#+END_SRC

** Relative Line Number
#+BEGIN_SRC emacs-lisp
;; Relative line package
(use-package nlinum-relative
  :init
  (progn
    (setq nlinum-relative-redisplay-delay 0)
    (setq nlinum-relative-current-symbol "")
    (setq nlinum-relative-offset 0))
  :config
  (progn
    (nlinum-relative-setup-evil)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t)
#+END_SRC
** Slime
#+BEGIN_SRC emacs-lisp
(use-package slime
  :defer t)
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :init
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-notes-location "~/Sync/Notes/"
        org-todo-location (expand-file-name
                           (concat org-notes-location "TODO.org"))
        org-agenda-files (list org-todo-location))
  :config
  (progn
    (use-package org-bullets)
    (use-package htmlize)
    (add-hook 'org-mode-hook (lambda()
                               (global-whitespace-mode 0)
                               (flyspell-mode 1)
                               (org-toggle-pretty-entities)
                               (org-bullets-mode 1)
                               ))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (java . t)
       (C . t)
       ))))

#+END_SRC
* ERC
#+BEGIN_SRC emacs-lisp
(use-package erc
  :defer t
  :init
  (progn
    (use-package erc-hl-nicks)
    (setq erc-prompt-for-password nil)
    ;; Switch current buffer whenever you are mentioned
    (setq erc-auto-query 'buffer)
    (setq erc-nick "neosloth")
    (setq erc-kill-buffer-on-part t)
    (setq erc-fill-prefix "      ")
    (setq erc-timestamp-format "[%H:%M] ")
    (setq erc-autojoin-channels-alist
          '((".*freenode.net" "#emacs")
            ("portlane.se.quakenet.org" "#unrealvidya")
            ))

    (defun irc-connect ()
      "Connect to IRC."
      (interactive)
      (when (y-or-n-p "IRC? ")
        (erc :server "irc.freenode.net" :port 6667
             :nick "neosloth")
        (erc :server "portlane.se.quakenet.org" :port 6667)
        )))
  :config
  (progn
    (add-hook 'erc-mode-hook (lambda()
                               (unless is-windows
                                 (erc-hl-nicks-mode 1))
                               (toggle-truncate-lines)
                               ))
    (erc-spelling-mode 1)))

#+END_SRC
* Programming Mode
** Language Independent Settings
#+BEGIN_SRC emacs-lisp
(use-package electric
  :commands electric-pair-mode
  :config
  (add-hook 'prog-mode-hook 'electric-pair-mode))

(use-package yasnippet
  :commands (yas-minor-mode)
  :init
  (add-hook 'prog-mode-hook 'yas-minor-mode))

(use-package whitespace
  :config
  (add-hook 'prog-mode-hook 'whitespace-mode))

(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

#+END_SRC
** C-Mode
#+BEGIN_SRC emacs-lisp
;;Indent c++ code with 4 spaces
(defun indent-c-mode-hook ()
  (setq c-basic-offset 4
        c-indent-level 4
        c-default-style "linux"))
(add-hook 'c-mode-common-hook 'indent-c-mode-hook)
#+END_SRC
** Python Mode
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (progn
    (setq elpy-rpc-backend "jedi")
    (with-eval-after-load 'python (elpy-enable))))
#+END_SRC
** HTML
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.html$" . web-mode)))

(use-package impatient-mode
  :commands impatient-mode)
#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :config
  ;; Launch auto-complete with default settings
  (ac-config-default))

(use-package flycheck
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode))

(use-package pdf-tools
  :defer t
  :config
  (add-hook 'doc-view-mode 'pdf-tools-install))
(use-package material-theme
  :init
  (load-theme 'material t))
;;Open TODO whenever user opens emacs.
;; This is done last to ensure that the entire config file is loaded
;;(find-file org-todo-location)
#+END_SRC
